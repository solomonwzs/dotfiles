# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
# ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git zsh-autosuggestions zsh-syntax-highlighting cargo fzf)

source $ZSH/oh-my-zsh.sh

[ -f "$HOME/.my_conf.sh" ] && source "$HOME/.my_conf.sh"

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

if hash nvim 2>/dev/null; then
    export EDITOR=nvim
else
    export EDITOR=vim
fi
export GOPATH=$HOME/workspace/go/lib

paths=( \
    "$HOME/bin" \
    "$HOME/.cargo/bin" \
    "$HOME/workspace/go/lib/bin" \
    "$HOME/.gem/ruby/2.6.0/bin" \
    "/usr/local/bin" \
    )
for p in "${paths[@]}"; do
    [ -d "$p" ] && export PATH=$PATH:"$p"
done

if hash fortune 2>/dev/null && hash cowsay 2>/dev/null && hash lolcat 2>/dev/null; then
    fortune -a | fmt -80 -s \
        | cowsay -$(shuf -n 1 -e b d g p s t w y) -f $(shuf -n 1 -e $(cowsay -l \
        | tail -n +2)) -n \
        | lolcat
fi

PROMPT=$'%B%F{${ZSH_COLOR_NAME:-63}}%n@%m%b %F{110}%D{[%H:%M:%S]} %F{244}[%~] $(git_prompt_info)%F{60}\n->%B%F{69} %#%b%f%k '

ZSH_THEME_GIT_PROMPT_PREFIX="%F{29}["
ZSH_THEME_GIT_PROMPT_SUFFIX="]%b%f%k"
ZSH_THEME_GIT_PROMPT_DIRTY=" %F{167}*%F{29}"
ZSH_THEME_GIT_PROMPT_UNKNOWN=" %F{167}?%F{29}"
ZSH_THEME_GIT_PROMPT_CLEAN=""

# Checks if working tree is dirty
# Set not show:
#   git config host-$(hostname).hide-dirty 1
function parse_git_dirty() {
    local STATUS
    local -a FLAGS
    FLAGS=('--porcelain')
    if [[ "$(command git config --get host-$(hostname).hide-dirty)" != "1" ]]; then
        if [[ "$DISABLE_UNTRACKED_FILES_DIRTY" == "true" ]]; then
            FLAGS+='--untracked-files=no'
        fi
        case "$GIT_STATUS_IGNORE_SUBMODULES" in
            git)
                # let git decide (this respects per-repo config in .gitmodules)
                ;;
            *)
                # if unset: ignore dirty submodules
                # other values are passed to --ignore-submodules
                FLAGS+="--ignore-submodules=${GIT_STATUS_IGNORE_SUBMODULES:-dirty}"
                ;;
        esac
        STATUS=$(command git status ${FLAGS} 2> /dev/null | tail -n1)
        if [[ -n $STATUS ]]; then
            echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
        else
            echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
        fi
    else
        echo "$ZSH_THEME_GIT_PROMPT_UNKNOWN"
    fi
}

man() {
    env LESS_TERMCAP_mb=$'\E[01;31m' \
        LESS_TERMCAP_md=$'\E[01;38;5;74m' \
        LESS_TERMCAP_me=$'\E[0m' \
        LESS_TERMCAP_se=$'\E[0m' \
        LESS_TERMCAP_so=$'\E[01;07;33m' \
        LESS_TERMCAP_ue=$'\E[0m' \
        LESS_TERMCAP_us=$'\E[04;38;5;146m' \
        man "$@"
}

office_web_proxy() {
    export https_proxy="$OFFICE_WEB_PROXY"
    export http_proxy="$OFFICE_WEB_PROXY"
}

ssr_web_proxy() {
    if [[ -z $SSR_WEB_PROXY ]]; then
        SSR_WEB_PROXY='http://127.0.0.1:8118'
    fi
    export https_proxy="$SSR_WEB_PROXY"
    export http_proxy="$SSR_WEB_PROXY"
}

v2ray_web_proxy() {
    if [[ -z $V2RAY_WEB_PROXY ]]; then
        V2RAY_WEB_PROXY='http://127.0.0.1:10809'
    fi
    export https_proxy="$V2RAY_WEB_PROXY"
    export http_proxy="$V2RAY_WEB_PROXY"
}

no_web_proxy() {
    export https_proxy=''
    export http_proxy=''
}

svn() {
    if [ -n "${SVN_USER:+x}" ] && [ -n "${SVN_PASS:+x}" ]; then
        command svn --username "$SVN_USER" --password "$SVN_PASS" $@
    else
        command svn $@
    fi
}

svn_() {
    if [ -n "${SVN_ACC:+x}" ]; then
        if [ -z "${SVN_ACC[$1]:+x}" ]; then
            echo "ERR: unknown user: \"$1\""
        else
            local user="$1"
            local pass="${SVN_ACC[$1]}"
            shift 1
            command svn --username "$user" --password "$pass" $@
        fi
    else
        command svn $@
    fi
}

tmux_set_title() {
    printf "\033k$1\033\\"
}

if ! type "pbcopy" > /dev/null; then
    if _loc="$(type -p "xclip")" && ! [[ -z $_loc ]]; then
        alias pbcopy='xclip -selection clipboard'
        alias pbpaste='xclip -selection clipboard -o'
    elif _loc="$(type -p "xsel")" && ! [[ -z $_loc ]]; then
        alias pbcopy='xsel --clipboard --input'
        alias pbpaste='xsel --clipboard --output'
    fi
fi

#####################
# Setting for fzf
#####################

pfzf() {
    command fzf --preview '[[ $(file --mime {}) =~ binary ]] &&
        echo {} is a binary file ||
        (bat --style=numbers --color=always {} ||
        highlight -O ansi -l {} ||
        coderay {} ||
        rougify {} ||
        cat {}) 2> /dev/null | head -500' \
        --bind 'enter:execute(${EDITOR:-vim} {})' \
        --bind 'ctrl-o:execute(open {})'
    }

export FZF_CTRL_T_OPTS="--preview '(bat --style=numbers --color=always {} || cat {} || tree -C {}) 2> /dev/null | head -200'"

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
    fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
}

#####################
# Setting for macos
#####################

if _loc="$(uname)" && [[ "$_loc" == "Darwin" ]]; then
    export DISPLAY=:0
    alias readlink=greadlink
fi
