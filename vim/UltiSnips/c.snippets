global !p
from snippets.common import strtoday
endglobal

snippet hdr "header" b
/**
 * @author  Solomon Ng <solomon.wzs@gmail.com>
 * @version 1.0
 * @date    `!p
snip.rv = strtoday()
`
 * @license MIT
 */
endsnippet

snippet #ifn "ifndef" b
#ifndef ${1:NAME}
#define $1

#endif
endsnippet

snippet main "main" b
int main(int argc, char **argv) {
  return 0;
}
endsnippet

snippet #xlog "macro log" b
#define xlog(_type_, _fmt_, ...)                                        \
  printf("\e[0;33m%.1s [%s:%s:%d]\e[0m " _fmt_ "\n", #_type_, __FILE__, \
         __func__, __LINE__, ##__VA_ARGS__)
endsnippet

snippet #slog "macro log" b
#define _STYLE_Debug "\e[3;36m"
#define _STYLE_Info  "\e[3;32m"
#define _STYLE_Warn  "\e[3;33m"
#define _STYLE_Err   "\e[3;31m"
#define ${1:name}(_type_, _fmt_, ...)                                 \
  printf(_STYLE_##_type_ "%.1s [%s:%s:%d]\e[0m " _fmt_ "\n", #_type_, \
         __FILE__, __func__, __LINE__, ##__VA_ARGS__)
endsnippet

snippet #off "macro offsetof" b
#ifndef offsetof
#ifdef __GNUC__
#define offsetof(_st_, _m_) __builtin_offsetof(_st_, _m_)
#else
#define offsetof(_st_, _m_) ((size_t) & (((_st_ *)0)->_m_))
#endif
#endif
endsnippet

snippet #container_of "macro container_of" b
#define container_of(_ptr_, _type_, _member_)                \
  ({                                                         \
    const typeof(((_type_ *)0)->_member_) *__mptr = (_ptr_); \
    (_type_ *)((char *)__mptr - offsetof(_type_, _member_)); \
  })
endsnippet

snippet #concat "macro concat" b
#define CONCAT_(_A, _B) _A##_B
#define CONCAT(_A, _B) CONCAT_(_A, _B)
endsnippet

snippet scp "strncpy" b
static inline void _strncpy(char *dst, const char *src, size_t n) {
  strncpy(dst, src, n);
  if (n > 0) {
    dst[n - 1] = '\0';
  }
}
endsnippet

snippet #calln "calln" b
#define _call0(_f_) _f_()
#define _call1(_f_) _f_(argv[2])
#define _call2(_f_) _f_(argv[2], argv[3])
#define _call3(_f_) _f_(argv[2], argv[3], argv[4])
#define _call4(_f_) _f_(argv[2], argv[3], argv[4], argv[5])
#define _call5(_f_) _f_(argv[2], argv[3], argv[4], argv[5], argv[6])
#define _call6(_f_) _f_(argv[2], argv[3], argv[4], argv[5], argv[6], argv[7])
endsnippet

snippet #flist "func list" b
#define _X(_cmd_, _func_, _n_, ...)                     \
  if (argc >= _n_ + 2 && strcmp(argv[1], _cmd_) == 0) { \
    return _call##_n_(_func_);                          \
  }
  _FUNC_LIST
#undef _X
endsnippet

snippet tool "tool" b
#define _call0(_f_) _f_()
#define _call1(_f_) _f_(argv[2])
#define _call2(_f_) _f_(argv[2], argv[3])
#define _call3(_f_) _f_(argv[2], argv[3], argv[4])
#define _call4(_f_) _f_(argv[2], argv[3], argv[4], argv[5])
#define _call5(_f_) _f_(argv[2], argv[3], argv[4], argv[5], argv[6])
#define _call6(_f_) _f_(argv[2], argv[3], argv[4], argv[5], argv[6], argv[7])

#define _FUNC_LIST                 \
  _X("foo", call_foo, 1, "<arg1>") \
  _X("bar", call_bar, 2, "<arg1> <arg2>")

int main(int argc, char **argv) {
#define _X(_cmd_, _func_, _n_, ...)                     \
  if (argc >= _n_ + 2 && strcmp(argv[1], _cmd_) == 0) { \
    return _call##_n_(_func_);                          \
  }
  _FUNC_LIST
#undef _X

  printf("Usage: %s $command $arg...\n", argv[0]);
#define _X(_cmd_, _func_, _n_, _args_, ...) printf("  " _cmd_ " " _args_ "\n");
  _FUNC_LIST
#undef _X

  return -1;
}
endsnippet
