extends c

snippet #defer "macro defer" b
#define CONCAT_(_A, _B) _A##_B
#define CONCAT(_A, _B) CONCAT_(_A, _B)
#define _defer(_fn_) \
  std::shared_ptr<void> CONCAT(__defer, __LINE__)(nullptr, _fn_)
endsnippet

snippet #defer_u "macro defer" b
#define CONCAT_(_A, _B) _A##_B
#define CONCAT(_A, _B) CONCAT_(_A, _B)
#define _defer(_fn_)                                         \
  std::unique_ptr<void, std::function<void(void *)>> CONCAT( \
      __defer, __LINE__)(reinterpret_cast<void *>(1), _fn_)
endsnippet

snippet #con "macro container_of" b
template <class P, class M>
size_t _offsetof_impl(const M P::*member) {
  return (size_t) & (reinterpret_cast<P *>(0)->*member);
}

template <class P, class M>
P *_container_of_impl(M *ptr, const M P::*member) {
  return (P *)((char *)ptr - _offsetof_impl(member));
}

#define container_of(_ptr_, _type_, _member_) \
  _container_of_impl(_ptr_, &_type_::_member_)
endsnippet

snippet coro "coroutine traits" b
struct ${1:name} {
  struct promise_type {
    $1 get_return_object() {
      return $1(
          std::experimental::coroutine_handle<promise_type>::from_promise(
              *this));
    }

    std::experimental::suspend_never initial_suspend() { return {}; }

    std::experimental::suspend_always final_suspend() noexcept { return {}; }

    void unhandled_exception() noexcept {}

    void return_void() {}

    void return_value(int val) {}

    std::experimental::suspend_always yield_value(int val) { return {}; }
  };

  explicit $1(std::experimental::coroutine_handle<promise_type> h) {}
  std::experimental::coroutine_handle<promise_type> handle;
};

endsnippet

snippet awaitable "awaitable traits" b
struct ${1:name} {
  bool await_ready() { return false; }

  void await_suspend(std::experimental::coroutine_handle<> h) noexcept {}

  void await_resume() noexcept {}
};
endsnippet

snippet #coro "incode coroutine" b
#if defined(__clang__)
#include <experimental/coroutine>
#define corons std::experimental
#else
#include <coroutine>
#define corons std
#endif
endsnippet

snippet #xmlog "macro log" b
#ifndef __DEBUG_TOOL
#define _XMLOG_LEVEL_Info  Comm::COMM_LOG_INFO
#define _XMLOG_LEVEL_Err   Comm::COMM_LOG_ERR
#define _XMLOG_LEVEL_Warn  Comm::COMM_LOG_ERR
#define _XMLOG_LEVEL_Debug Comm::COMM_LOG_DEBUG
#define xmlog(_type_, _fmt_, ...)                                             \
  do {                                                                        \
    if (Comm::GetLogLevel() >= _XMLOG_LEVEL_##_type_) {                       \
      Comm::Log(_XMLOG_LEVEL_##_type_, ">[%s:%d] " _fmt_, __func__, __LINE__, \
                ##__VA_ARGS__);                                               \
    }                                                                         \
  } while (0)
#else
#define _STYLE_Info  "\e[3;32m"
#define _STYLE_Err   "\e[3;31m"
#define _STYLE_Warn  "\e[3;33m"
#define _STYLE_Debug "\e[3;36m"
#define xmlog(_type_, _fmt_, ...)                                     \
  printf(_STYLE_##_type_ "%.1s [%s:%s:%d]\e[0m " _fmt_ "\n", #_type_, \
         __FILE__, __func__, __LINE__, ##__VA_ARGS__)
#endif
endsnippet
