{
  "coc.preferences.jumpCommand": "split",
  "coc.preferences.currentFunctionSymbolAutoUpdate": true,

  "suggest.formatItems": ["abbr", "menu", "kind", "shortcut"],
  // "suggest.completionItemKindLabels": {
  //   "keyword": "\uf1de", // 
  //   "variable": "\ue79b", // 
  //   "value": "\uf89f", // 
  //   "operator": "\u03a8", // Ψ
  //   "constructor": "\uf0ad", // 
  //   "function": "\u0192", // ƒ
  //   "reference": "\ufa46", // 渚
  //   "constant": "\uf8fe", // 
  //   "method": "\uf09a", // 
  //   "struct": "\ufb44", // פּ
  //   "class": "\uf0e8", // 
  //   "interface": "\uf417", // 
  //   "text": "\ue612", // 
  //   "enum": "\uf435", // 
  //   "enumMember": "\uf02b", // 
  //   "module": "\uf40d", // 
  //   "color": "\ue22b", // 
  //   "property": "\ue624", // 
  //   "field": "\uf9be", // 料
  //   "unit": "\uf475", // 
  //   "event": "\ufacd", // 鬒
  //   "file": "\uf723", // 
  //   "folder": "\uf114", // 
  //   "snippet": "\ue60b", // 
  //   "typeParameter": "\uf728", // 
  //   "default": "\uf29c" // 
  // },

  "git.addedSign.hlGroup": "GitGutterAdd",
  "git.changedSign.hlGroup": "GitGutterChange",
  "git.changeRemovedSign.hlGroup": "GitGutterChangeDelete",
  "git.removedSign.hlGroup": "GitGutterDelete",
  "git.topRemovedSign.hlGroup": "GitGutterDelete",

  "suggest.floatConfig": {
    "border": true,
    "borderhighlight": "CocFloatingBorder"
  },
  "diagnostic.floatConfig": {
    "border": true,
    "borderhighlight": "CocFloatingBorder"
  },
  "signature.floatConfig": {
    "border": true,
    "borderhighlight": "CocFloatingBorder"
  },
  "hover.floatConfig": {
    "border": true,
    "borderhighlight": "CocFloatingBorder"
  },
  "coc-ext.floatConfig": {
    "border": true,
    "borderhighlight": "CocFloatingBorder"
  },

  "diagnostic.infoSign": "",
  "diagnostic.hintSign": "",
  "diagnostic.errorSign": "",
  "diagnostic.warningSign": "",

  "list.statusLineSegments": [
    "%#CocListHeader# CocList",
    "%#CocListSep0# %#CocListArgs#%{coc#list#status(\"args\")}",
    "%#CocListSep1# %#CocListPath#%{coc#list#status(\"cwd\")}",
    "%#CocListSep2# %#CocListBg#",
    "%=",
    "%#CocListSep3#%#CocListInfo# %l/%L",
    "%#CocListSep4#%#CocListTotal# Total: %{coc#list#status(\"total\")} %*"
  ],
  "list.insertMappings": {
    "<C-x>": "action:ctrl-x",
    "<C-s>": "action:ctrl-s",

    "<C-p>": "action:preview"
  },
  "list.normalMappings": {
    // "<C-x>": "do:exit"
  },
  "list.previewSplitRight": true,

  "coc-ext.erlang.erlangLsPath": "/home/solomon/workspace/erlang/erlang_ls/_build/default/bin/erlang_ls",
  "coc-ext.erlang.traceServer": "off",

  "coc-ext.log.detail": false,
  "coc-ext.log.level": 0,

  "coc-ext.formatting": [
    {
      "languages": ["proto"],
      "setting": {
        "provider": "clang-format",
        "args": {
          "AlignConsecutiveAssignments": "true",
          "AlignConsecutiveDeclarations": "true",
          "AlignEscapedNewlines": "Left"
        }
      }
    },
    {
      "languages": ["lua"],
      "setting": {
        "provider": "lua-format",
        "args": [
          "--single-quote-to-double-quote",
          "--no-keep-simple-control-block-one-line"
        ]
      }
    }
  ],

  "python.formatting.provider": "black",
  "python.formatting.blackArgs": ["-l", "80"],
  "pyright.inlayHints.enable": false,

  "sumneko-lua.enableNvimLuaDev": true,
  "Lua.hint.enable": false,

  "languageserver": {
    // pacman -S bash-language-server
    "bash": {
      "command": "bash-language-server",
      "args": ["start"],
      "filetypes": ["sh"],
      "ignoredRootPaths": ["~"]
    },

    // :CocInstall coc-rls
    // "rust": {},

    "golang": {
      "command": "gopls",
      "filetypes": ["go"],
      "initializationOptions": {}
    },

    "clangd": {
      "command": "clangd",
      "args": [],
      "rootPatterns": [
        "compile_flags.txt",
        "compile_commands.json",
        ".vim/",
        ".git/",
        ".hg/"
      ],
      "filetypes": ["c", "cpp", "objc", "objcpp"]
    },

    // "ccls": {
    //   "command": "ccls",
    //   "filetypes": ["c", "cpp", "cuda", "objc", "objcpp"],
    //   "rootPatterns": [".ccls", "compile_commands.json", ".vim/", ".git/", ".hg/"],
    //   "initializationOptions": {
    //     "cache": {
    //       "directory": "/tmp/ccls-cache"
    //     }
    //   }
    // },

    "elixirLS": {
      "command": "~/.vim/language_servers/elixir-ls/release/language_server.sh",
      "filetypes": ["elixir", "eelixir"]
    }
  },
  "git.enableGutters": true,
  "Lua.telemetry.enable": true
}
