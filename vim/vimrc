set encoding=utf-8
scriptencoding utf-8

set updatetime=500

" Encrypt
if has('vim')
    set cryptmethod=blowfish2
endif

let mapleader = "\\"
let maplocalleader = ','
let g:vimhome = fnameescape(fnamemodify(resolve(expand('<sfile>:p')), ':h'))

set keywordprg=man\ -s

" set viminfo
set nobackup
set nowritebackup

set t_Co=256
set background=dark

syntax enable

set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
set smarttab
set autoindent
filetype plugin indent on

set modeline

set mouse=a

set number
set ruler

set fileencodings=ucs-bom,utf-8,cp936,gbk
" set termencoding=utf-8

set foldmethod=indent
set nofoldenable
set foldlevel=1

set noequalalways

set diffopt=vertical

" Setting for search
set hlsearch
set magic

" Setting for auto reload file
set autoread

" Setting for row control
set linebreak
set wrap

" Setting for cscope
if has('cscope')
    set cscopetagorder=0
    set cscopetag
    set nocscopeverbose
    set cscopeverbose
    set cscopequickfix=s-,d-,c-,t-,e-,f-,i-
endif

set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

augroup my_vimrc
    autocmd!

    autocmd CursorMovedI * if pumvisible() == 0 | pclose | endif
    autocmd InsertLeave * if pumvisible() == 0 | pclose | endif

    " Restore cursor position
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") |
            \ exe "normal! g`\"" | endif

    autocmd FileType java       setlocal omnifunc=javacomplete#Complete
    autocmd Filetype c          setlocal omnifunc=ccomplete#Complete
    autocmd Filetype html       setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd Filetype markdown   setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd Filetype xml        setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd Filetype python     setlocal omnifunc=pythoncomplete#CompleteTags
    autocmd FileType python     setlocal completeopt-=preview
    autocmd Filetype tex        setlocal omnifunc=syntaxcomplete#Complete
    autocmd FileType css        setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType json       syntax match Comment +\/\/.\+$+

    if executable('ghc-mod')
        autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
    endif

    autocmd BufEnter,BufRead *.vue set filetype=vue.javascript
    autocmd BufEnter,BufRead compile_flags.txt set filetype=conf

    autocmd FileType html,xml,yaml,vue.javascript,javascript
            \ setlocal sw=2 tabstop=2 softtabstop=2
    autocmd FileType make setlocal noet
augroup END

let g:html_indent_inctags = 'li,body,head'
let g:asmsyntax = 'nasm'


"================ MAP KEY ================
" nmap <leader>h :help <C-R>=expand("<cword>")<CR><CR>

nmap <silent> <leader>t :call lib#translate#google_async(expand("<cword>"))<CR>
vnoremap <leader>t :<C-U>call lib#translate#google_async(
        \ lib#common#visual_selection())<CR>

nnoremap <silent> <F5> :let _s=@/ <Bar>
        \ :%s/\s\+$//e <Bar>
        \ :let @/=_s <Bar>
        \ :nohl <Bar> :unlet _s <CR>

" Setting for tmux && screen
" if $TMUX !=? '' || $TERM[0:3] ==? 'tmux' || $TERM[0:5] ==? 'screen'
"     map <esc>[1;5D <C-Left>
"     map <esc>[1;5C <C-Right>
" endif

" Setting for C-c copy text
vmap <C-c> "+y
if $SSH_CLIENT !=? ''
    " install `xclip` and set `X11Forwarding yes` in sshd_config"
    if executable('xclip')
        vmap <silent> "+y :call system('xclip -i -sel clip',
                \ lib#common#visual_selection())<CR>
        " map "+p :r!xclip -o -sel clip<CR>
    endif
endif
"================ MAP KEY ================


"================ Load Plugin ================
let g:lib_bundle_whitelist = []
let g:lib_bundle_blacklist = []

if has('nvim')
    let g:lib_bundle_whitelist += [
            \ 'defx-git',
            \ 'defx.nvim',
            \ ]
    let g:lib_bundle_blacklist += [
            \ 'nerdtree',
            \ ]
endif

if $VIM_GROUP ==? 'erl'
    let g:lib_bundle_whitelist += [
            \ 'syntastic',
            \ 'vim-erlang-tags',
            \ 'vim-erlang-omnicomplete',
            \ 'YouCompleteMe',
            \ ]
    let g:lib_bundle_blacklist += [
            \ 'ale',
            \ 'vim-gutentags',
            \ 'coc.nvim',
            \ ]
elseif $VIM_GROUP ==? 'scheme'
    let g:lib_bundle_blacklist += ['ale']
elseif $VIM_GROUP ==? 'python'
    let g:lib_bundle_whitelist += [
            \ 'YouCompleteMe',
            \ 'jedi-vim',
            \ ]
    let g:lib_bundle_blacklist += ['coc.nvim']
elseif $VIM_GROUP ==? 'rust'
    let g:lib_bundle_whitelist += ['syntastic']
    let g:lib_bundle_blacklist += ['ale']
elseif $VIM_GROUP ==? 'ycm'
    let g:lib_bundle_whitelist += ['YouCompleteMe']
    let g:lib_bundle_blacklist += ['coc.nvim']
elseif $VIM_GROUP ==? 'debug'
    let g:lib_bundle_whitelist += ['vista.vim']
endif

call lib#bundle#load()
"================ Load Plugin ================
